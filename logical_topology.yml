#
- hosts: 127.0.0.1
  connection: local
  become: yes
  vars_files:
    - static_vars.yml
    - user_defined_vars.yml
  tasks:
    - name: Create NSX Gateway
      vmware.ansible_for_nsxt.nsxt_policy_tier0:
        hostname: "{{ nsx_node1.mgmt_ip }}"
        username: "{{ nsx.username }}"
        password: "{{ nsx.password }}"
        validate_certs: "{{ validate_certs }}"
        display_name: "NSX-GATEWAY"
        ha_mode: "ACTIVE_STANDBY"
        static_routes:
          - state: present
            display_name: default
            network: '0.0.0.0/0'
            next_hops:
            - ip_address: "{{uplink_network.gateway_ip}}"
        locale_services:
          - state: "{{ state }}"
            id: "nsxgateway-localservices"
            interfaces:
              - id: "uplink-eg1"
                display_name: "uplink-eg1"
                state: "{{ state }}"
                subnets:
                  - ip_addresses: ["{{uplink_network.edge01_ip}}"]
                    prefix_len: "{{uplink_network.prefix_length}}"
                segment_id: "Edge-Uplink"
                edge_node_info:
                  edge_node_display_name: "nsx-edge-01"
                  edge_cluster_display_name: "edge-cluster-01"
              - id: "uplink-eg2"
                display_name: "uplink-eg2"
                state: "{{ state }}"
                subnets:
                  - ip_addresses: ["{{uplink_network.edge02_ip}}"]
                    prefix_len: "{{uplink_network.prefix_length}}"
                segment_id: "Edge-Uplink"
                edge_node_info:
                  edge_node_display_name: "nsx-edge-02"
                  edge_cluster_display_name: "edge-cluster-01"
        state: "{{ state }}"

    - name: Pause for 5 minutes so that the NSX Gateway is Realized (!!!DO NOT SKIP!!!)
      pause:
        minutes: 5

    - name: Add HA VIP to NSX Gateway
      vmware.ansible_for_nsxt.nsxt_policy_tier0:
        hostname: "{{ nsx_node1.mgmt_ip }}"
        username: "{{ nsx.username }}"
        password: "{{ nsx.password }}"
        validate_certs: "{{ validate_certs }}"
        display_name: "NSX-GATEWAY"
        ha_mode: "ACTIVE_STANDBY"
        static_routes:
          - state: "{{ state }}"
            display_name: default
            network: '0.0.0.0/0'
            next_hops:
            - ip_address: "{{uplink_network.gateway_ip}}"
        locale_services:
          - state: "{{ state }}"
            id: "nsxgateway-localservices"
            interfaces:
              - id: "uplink-eg1"
                display_name: "uplink-eg1"
                state: "{{ state }}"
                subnets:
                  - ip_addresses: ["{{uplink_network.edge01_ip}}"]
                    prefix_len: "{{uplink_network.prefix_length}}"
                segment_id: "Edge-Uplink"
                edge_node_info:
                  edge_node_display_name: "nsx-edge-01"
                  edge_cluster_display_name: "edge-cluster-01"
              - id: "uplink-eg2"
                display_name: "uplink-eg2"
                state: "{{ state }}"
                subnets:
                  - ip_addresses: ["{{uplink_network.edge02_ip}}"]
                    prefix_len: "{{uplink_network.prefix_length}}"
                segment_id: "Edge-Uplink"
                edge_node_info:
                  edge_node_display_name: "nsx-edge-02"
                  edge_cluster_display_name: "edge-cluster-01"
            ha_vip_configs:
              - enabled: true
                external_interface_info:
                  - id: "uplink-eg1"
                  - id: "uplink-eg2"
                vip_subnets:
                  - ip_addresses:
                    - "{{uplink_network.vip_ip}}"
                    prefix_len: "{{uplink_network. prefix_length}}"
        state: "{{ state }}"


    - name: Add Service Interface to NSX Gateway
      when: management_network.nsxgateway_serviceinterface_present
      vmware.ansible_for_nsxt.nsxt_policy_tier0:
        hostname: "{{ nsx_node1.mgmt_ip }}"
        username: "{{ nsx.username }}"
        password: "{{ nsx.password }}"
        validate_certs: "{{ validate_certs }}"
        display_name: "NSX-GATEWAY"
        ha_mode: "ACTIVE_STANDBY"
        static_routes:
          - state: "{{ state }}"
            display_name: default
            network: '0.0.0.0/0'
            next_hops:
            - ip_address: "{{uplink_network.gateway_ip}}"
        locale_services:
          - state: "{{ state }}"
            id: "nsxgateway-localservices"
            interfaces:
              - id: "uplink-eg1"
                display_name: "uplink-eg1"
                state: "{{ state }}"
                subnets:
                  - ip_addresses: ["{{uplink_network.edge01_ip}}"]
                    prefix_len: "{{uplink_network.prefix_length}}"
                segment_id: "Edge-Uplink"
                edge_node_info:
                  edge_node_display_name: "nsx-edge-01"
                  edge_cluster_display_name: "edge-cluster-01"
              - id: "uplink-eg2"
                display_name: "uplink-eg2"
                state: "{{ state }}"
                subnets:
                  - ip_addresses: ["{{uplink_network.edge02_ip}}"]
                    prefix_len: "{{uplink_network.prefix_length}}"
                segment_id: "Edge-Uplink"
                edge_node_info:
                  edge_node_display_name: "nsx-edge-02"
                  edge_cluster_display_name: "edge-cluster-01"
              - id: "sp-infra-01"
                display_name: "sp-infra-01"
                state: "{{ state }}"
                type: "SERVICE"
                subnets:
                  - ip_addresses: ["{{management_network.nsxgateway_serviceinterface_ip}}"]
                    prefix_len: "{{management_network.prefix_length}}"
                segment_id: "Edge-Infra"
                edge_node_info:
                  edge_node_display_name: "nsx-edge-01"
                  edge_cluster_display_name: "edge-cluster-01"
            ha_vip_configs:
              - enabled: true
                external_interface_info:
                  - id: "uplink-eg1"
                  - id: "uplink-eg2"
                vip_subnets:
                  - ip_addresses:
                    - "{{uplink_network.vip_ip}}"
                    prefix_len: "{{uplink_network. prefix_length}}"
        state: "{{ state }}"


    - name: Configure SNAT Rule on NSX Gateway
      uri:
        method: PATCH
        url: https://{{ nsx_node1.mgmt_ip }}/policy/api/v1/infra/tier-0s/NSX-GATEWAY/nat/USER/nat-rules/SNAT
        user: "{{ nsx.username }}"
        password: "{{ nsx.password }}"
        body:
          display_name: Global SNAT
          description: SNAT any outbound traffic
          action: SNAT
          translated_network: "{{uplink_network.snat_ip}}"
          sequence_number: 1000
          scope:
          - /infra/tier-0s/NSX-GATEWAY/locale-services/nsxgateway-localservices/interfaces/uplink-eg1
          - /infra/tier-0s/NSX-GATEWAY/locale-services/nsxgateway-localservices/interfaces/uplink-eg2
          enabled: true
          logging: false
          firewall_match: MATCH_INTERNAL_ADDRESS
        body_format: json
        force_basic_auth: yes
        validate_certs: no

    - name: Create Overlay Segmets
      vmware.ansible_for_nsxt.nsxt_policy_segment:
        hostname: "{{ nsx_node1.mgmt_ip }}"
        username: "{{ nsx.username }}"
        password: "{{ nsx.password }}"
        validate_certs: "{{ validate_certs }}"
        display_name: "{{ item.display_name }}"
        replication_mode: SOURCE
        admin_state: UP
        transport_zone_display_name: "{{ item.transport_zone_name }}"
        connectivity_path: "{{ item.connectivity_path }}"
        subnets: "{{ item.subnets }}"
        state: "{{ state }}"
        tags: "{{ item.tags }}"
      with_items:
        - "{{ overlay_segments }}"

    - name: Create RDP-REMOTE-ACCESS Security Group
      vmware.ansible_for_nsxt.nsxt_policy_group:
        hostname: "{{ nsx_node1.mgmt_ip }}"
        username: "{{ nsx.username }}"
        password: "{{ nsx.password }}"
        validate_certs: "{{ validate_certs }}"
        display_name: RDP-REMOTE-ACCESS
        state: "{{ state }}"
        domain_id: "default"
        expression:
          - member_type: "VirtualMachine"
            value: "remote|rdp"
            key: "Tag"
            operator: "EQUALS"
            resource_type: "Condition"

    - name: Create SSH-REMOTE-ACCESS Security Group
      vmware.ansible_for_nsxt.nsxt_policy_group:
        hostname: "{{ nsx_node1.mgmt_ip }}"
        username: "{{ nsx.username }}"
        password: "{{ nsx.password }}"
        validate_certs: "{{ validate_certs }}"
        display_name: SSH-REMOTE-ACCESS
        state: "present"
        domain_id: "default"
        expression:
          - member_type: "VirtualMachine"
            value: "remote|ssh"
            key: "Tag"
            operator: "EQUALS"
            resource_type: "Condition"

    - name: Create INTERNAL Security Group
      vmware.ansible_for_nsxt.nsxt_policy_group:
        hostname: "{{ nsx_node1.mgmt_ip }}"
        username: "{{ nsx.username }}"
        password: "{{ nsx.password }}"
        validate_certs: "{{ validate_certs }}"
        display_name: INTERNAL
        state: "present"
        domain_id: "default"
        expression:
          - member_type: "Segment"
            value: "zone|internal"
            key: "Tag"
            operator: "EQUALS"
            resource_type: "Condition"

    - name: Create DMZ Security Group
      vmware.ansible_for_nsxt.nsxt_policy_group:
        hostname: "{{ nsx_node1.mgmt_ip }}"
        username: "{{ nsx.username }}"
        password: "{{ nsx.password }}"
        validate_certs: "{{ validate_certs }}"
        display_name: DMZ
        state: "present"
        domain_id: "default"
        expression:
          - member_type: "Segment"
            value: "zone|dmz"
            key: "Tag"
            operator: "EQUALS"
            resource_type: "Condition"

    - name: Create DMZ Policy Isolation (DFW)
      vmware.ansible_for_nsxt.nsxt_policy_security_policy:
        hostname: "{{ nsx_node1.mgmt_ip }}"
        username: "{{ nsx.username }}"
        password: "{{ nsx.password }}"
        validate_certs: "{{ validate_certs }}"
        display_name: "DMZ-ISOLATION"
        id: "DMZ-ISOLATION"
        state: "present"
        domain_id: "default"
        scope:
        - "/infra/domains/default/groups/DMZ"
        rules:
        - action: "DROP"
          sequence_number: 1
          display_name: "BlockDMZToInternal"
          id: "BlockDMZToInternal"
          source_groups: ["/infra/domains/default/groups/DMZ"]
          destination_groups: ["/infra/domains/default/groups/INTERNAL"]
          services: "ANY"
          logged: True
        - action: "DROP"
          sequence_number: 2
          display_name: "BlockFromDMZtoDMZ"
          id: "BlockFromDMZtoDMZ"
          source_groups: ["/infra/domains/default/groups/DMZ"]
          destination_groups: ["/infra/domains/default/groups/DMZ"]
          services: "ANY"
          logged: True

    - name: Create Gateway Firewall Inbound Policy
      vmware.ansible_for_nsxt.nsxt_policy_gateway_policy:
        hostname: "{{ nsx_node1.mgmt_ip }}"
        username: "{{ nsx.username }}"
        password: "{{ nsx.password }}"
        validate_certs: "{{ validate_certs }}"
        display_name: "InboundPolicy"
        id: "InboundPolicy"
        state: "present"
        sequence_number: 100
        rules:
          - action: "ALLOW"
            sequence_number: 1
            display_name: "RDPAccess"
            id: "RDPAccess"
            source_groups: ANY
            destination_groups: ["/infra/domains/default/groups/RDP-REMOTE-ACCESS"]
            services: ["/infra/services/RDP"]
            logged: False
            ip_protocol: IPV4_IPV6
            direction: IN
            scope:
            - /infra/tier-0s/NSX-GATEWAY/locale-services/nsxgateway-localservices/interfaces/uplink-eg1
            - /infra/tier-0s/NSX-GATEWAY/locale-services/nsxgateway-localservices/interfaces/uplink-eg2 
          - action: "ALLOW"
            sequence_number: 1
            display_name: "SSHAccess"
            id: "SSHAccess"
            source_groups: ANY
            destination_groups: ["/infra/domains/default/groups/SSH-REMOTE-ACCESS"]
            services: ["/infra/services/SSH"]
            logged: False
            ip_protocol: IPV4_IPV6
            direction: IN
            scope:
            - /infra/tier-0s/NSX-GATEWAY/locale-services/nsxgateway-localservices/interfaces/uplink-eg1
            - /infra/tier-0s/NSX-GATEWAY/locale-services/nsxgateway-localservices/interfaces/uplink-eg2
          - action: "DROP"
            sequence_number: 1
            display_name: "DenyInboundAll"
            id: "DenyInboundAll"
            source_groups: ANY
            destination_groups: ANY
            services: ANY
            logged: True
            ip_protocol: IPV4_IPV6
            direction: IN
            scope:
            - /infra/tier-0s/NSX-GATEWAY/locale-services/nsxgateway-localservices/interfaces/uplink-eg1
            - /infra/tier-0s/NSX-GATEWAY/locale-services/nsxgateway-localservices/interfaces/uplink-eg2

    - name: Create Gateway Firewall Outbound Policy
      vmware.ansible_for_nsxt.nsxt_policy_gateway_policy:
        hostname: "{{ nsx_node1.mgmt_ip }}"
        username: "{{ nsx.username }}"
        password: "{{ nsx.password }}"
        validate_certs: "{{ validate_certs }}"
        display_name: "OutboundPolicy"
        id: "OutboundPolicy"
        state: "present"
        sequence_number: 200
        rules:
          - action: "ALLOW"
            sequence_number: 1
            display_name: "AllowOutboundAll"
            id: "AllowOutboundAll"
            source_groups: ANY
            destination_groups: ANY
            services: ANY
            logged: True
            ip_protocol: IPV4_IPV6
            direction: OUT
            scope:
            - /infra/tier-0s/NSX-GATEWAY/locale-services/nsxgateway-localservices/interfaces/uplink-eg1
            - /infra/tier-0s/NSX-GATEWAY/locale-services/nsxgateway-localservices/interfaces/uplink-eg2

    - name: Create Gateway Firewall Policy For Infrastructure Access
      when: management_network.nsxgateway_serviceinterface_present
      vmware.ansible_for_nsxt.nsxt_policy_gateway_policy:
        hostname: "{{ nsx_node1.mgmt_ip }}"
        username: "{{ nsx.username }}"
        password: "{{ nsx.password }}"
        validate_certs: "{{ validate_certs }}"
        display_name: "InfrastructureAccess"
        id: "InfrastructureAccess"
        state: "present"
        sequence_number: 300
        rules:
          - action: "ALLOW"
            sequence_number: 1
            display_name: "AllowFromInternalToInfra"
            id: "AllowFromInternalToInfra"
            source_groups: ["/infra/domains/default/groups/INTERNAL"]
            destination_groups: ANY
            services: ANY
            logged: True
            ip_protocol: IPV4_IPV6
            direction: OUT
            scope:
            - /infra/tier-0s/NSX-GATEWAY/locale-services/nsxgateway-localservices/interfaces/sp-infra-01
          - action: "DROP"
            sequence_number: 2
            display_name: "DenyAllFromToInfra"
            id: "DenyAllFromToInfra"
            source_groups: ANY
            destination_groups: ANY
            services: ANY
            logged: True
            ip_protocol: IPV4_IPV6
            direction: IN_OUT
            scope:
            - /infra/tier-0s/NSX-GATEWAY/locale-services/nsxgateway-localservices/interfaces/sp-infra-01
